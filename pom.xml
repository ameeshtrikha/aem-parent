<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>net.ameesh.cms.aem</groupId>
    <artifactId>aem-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>aem-parent</name>

    <!-- ====================================================================== -->
    <!-- P R O P E R T I E S -->
    <!-- ====================================================================== -->
    <properties>
        <version.jdk>1.8</version.jdk>
        <version.maven>3.0.3</version.maven>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <war.configuration.phase>none</war.configuration.phase>

        <crx.host>localhost</crx.host>
        <crx.port>4502</crx.port>
        <crx.username>admin</crx.username>
        <crx.password>admin</crx.password>
        <crx.workspace>crx.default</crx.workspace>

        <publish.crx.host>localhost</publish.crx.host>
        <publish.crx.port>4503</publish.crx.port>
        <publish.crx.username>admin</publish.crx.username>
        <publish.crx.password>admin</publish.crx.password>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <package.name>${project.artifactId}</package.name>
        <package.group>Ameesh</package.group>
        <package.root>/apps/ameesh</package.root>
        <package.install.root>${package.root}</package.install.root>
        <package.jcr.root>src/main/content/jcr_root</package.jcr.root>
    </properties>

    <!--
        Inclusion of repositories in POMs is controversial, to say the least.
        It would be best if you proxied the Adobe repository using a Maven
        Repository Manager. Once you do that, remove these sections.
     -->
    <repositories>
        <repository>
            <id>adobe</id>
            <name>Adobe Public Repository</name>
            <url>http://repo.adobe.com/nexus/content/groups/public/</url>
            <layout>default</layout>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>adobe</id>
            <name>Adobe Public Repository</name>
            <url>http://repo.adobe.com/nexus/content/groups/public/</url>
            <layout>default</layout>
        </pluginRepository>
    </pluginRepositories>

    <!-- ====================================================================== -->
    <!-- D E P E N D E N C I E S                                                -->
    <!-- ====================================================================== -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.osgi</groupId>
                <artifactId>org.osgi.compendium</artifactId>
                <version>4.2.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.osgi</groupId>
                <artifactId>org.osgi.core</artifactId>
                <version>4.2.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.jcr</groupId>
                <artifactId>jcr</artifactId>
                <version>2.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.felix</groupId>
                <artifactId>org.apache.felix.scr.annotations</artifactId>
                <version>1.9.12</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>biz.aQute</groupId>
                <artifactId>bndlib</artifactId>
                <version>1.43.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.6</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.adobe.aem</groupId>
                <artifactId>uber-jar</artifactId>
                <version>6.1.0</version>
                <classifier>obfuscated-apis</classifier>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>junit-addons</groupId>
                <artifactId>junit-addons</artifactId>
                <version>1.4</version>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <artifactId>xercesImpl</artifactId>
                        <groupId>xerces</groupId>
                    </exclusion>
                    <exclusion>
                        <artifactId>xmlParserAPIs</artifactId>
                        <groupId>xerces</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>1.7.6</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.jmockit</groupId>
                <artifactId>jmockit</artifactId>
                <version>1.18</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
                <version>2.5</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.0</version>
            </dependency>
            <dependency>
                <groupId>commons-collections</groupId>
                <artifactId>commons-collections</artifactId>
                <version>3.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.sling</groupId>
                <artifactId>org.apache.sling.models.api</artifactId>
                <version>1.1.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.sling</groupId>
                <artifactId>org.apache.sling.models.impl</artifactId>
                <version>1.1.0</version>
                <scope>provided</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Build Configuration -->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <!-- http://maven.apache.org/plugins/maven-compiler-plugin/ -->
                        <source>${version.jdk}</source>
                        <target>${version.jdk}</target>
                    </configuration>
                </plugin>

                <!-- creates OSGi bundles -->
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <version>2.5.3</version>
                    <extensions>true</extensions>
                    <inherited>true</inherited>
                    <configuration>
                        <instructions>
                            <!-- enrich project description by build information -->
                            <Bundle-Description>${project.description} - ${project.artifactId}</Bundle-Description>
                        </instructions>
                    </configuration>
                </plugin>

                <!-- deploys OSGi bundles to Felix, http://sling.apache.org/site/sling.html -->
                <plugin>
                    <groupId>org.apache.sling</groupId>
                    <artifactId>maven-sling-plugin</artifactId>
                    <version>2.1.0</version>
                    <configuration>
                        <slingUrl>htt://${crx.host}:${crx.port}/crx/repository/${crx.workspace}${package.install.root}/install</slingUrl>
                        <usePut>true</usePut>
                        <user>${crx.username}</user>
                        <password>${crx.password}</password>
                    </configuration>
                </plugin>

                <!-- creates and deploys CRX packages, http://dev.day.com/docs/en/cq/current/core/how_to/how_to_use_the_vlttool/vlt-mavenplugin.html -->
                <plugin>
                    <groupId>com.day.jcr.vault</groupId>
                    <artifactId>content-package-maven-plugin</artifactId>
                    <version>0.0.20</version>
                    <extensions>true</extensions>
                    <inherited>true</inherited>
                    <configuration>
                        <userId>${crx.username}</userId>
                        <password>${crx.password}</password>
                        <workspace>${crx.workspace}</workspace>
                        <targetURL>http://${crx.host}:${crx.port}/crx/packmgr/service.jsp</targetURL>
                        <!-- <classesDirectory>${project.build.directory}/jspc-plugin-generated</classesDirectory> -->
                        <useProxy>false</useProxy>
                        <failOnError>true</failOnError>
                        <!-- the directory which is created by the resource phase (see resource
                        section below) -->
                        <builtContentDirectory>target/package/jcr_root</builtContentDirectory>
                        <!-- <workDirectory>target/package</workDirectory> -->
                        <group>${package.group}</group>
                        <name>${package.name}</name>
                        <!-- enrich description with build informations -->
                        <properties>
                            <description>${project.description} - ${build.details}</description>
                        </properties>
                        <embeddedTarget>${package.install.root}/install</embeddedTarget>
                        <filters>
                            <filter>
                                <root>${package.root}</root>
                            </filter>
                        </filters>
                        <embeddeds>
                            <embedded>
                                <!-- embed everything which has the same group id as this project
                                itself, nevertheless it only filters from the list of given dependencies. -->
                                <groupId>${project.groupId}</groupId>
                            </embedded>
                        </embeddeds>
                    </configuration>
                    <executions>
                        <execution>
                            <!-- packaging needs to be explicitly defined, since content-packages
                            normally have WAR packaging -->
                            <id>default-package</id>
                            <goals>
                                <goal>package</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- to compile the JSPs during the maven build, http://sling.apache.org/site/jspc.html -->
                <plugin>
                    <groupId>org.apache.sling</groupId>
                    <artifactId>maven-jspc-plugin</artifactId>
                    <version>2.0.6</version>
                    <configuration>
                        <sourceDirectory>${basedir}/${package.jcr.root}</sourceDirectory>
                    </configuration>
                    <executions>
                        <execution>
                            <id>compile-jsp</id>
                            <goals>
                                <goal>jspc</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <!-- the packaging of the content-packages is war to make Eclipse support
                    you more -->
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.3</version>
                    <inherited>true</inherited>
                    <configuration>
                        <overlays>
                            <overlay />
                        </overlays>
                        <packagingExcludes>**</packagingExcludes>
                        <primaryArtifact>false</primaryArtifact>
                        <warSourceDirectory>${package.jcr.root}</warSourceDirectory>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>

                </plugin>

                <!-- generates OSGI services from annotations (http://felix.apache.org/site/apache-felix-maven-scr-plugin.html) -->
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-scr-plugin</artifactId>
                    <version>1.20.0</version>
                    <configuration>
                        <properties>
                            <service.vendor>Ameesh</service.vendor>
                        </properties>
                    </configuration>
                    <executions>
                        <execution>
                            <id>generate-scr-descriptor</id>
                            <goals>
                                <goal>scr</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- checks all xml files (within view projects) for well-formedness -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>xml-maven-plugin</artifactId>
                    <version>1.0</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>validate</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <validationSets>
                            <validationSet>
                                <dir>${package.jcr.root}</dir>
                                <includes>
                                    <include>**\*.xml</include>
                                </includes>
                            </validationSet>
                        </validationSets>
                    </configuration>
                </plugin>

                <!-- Require Java 5 or higher for building -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>1.2</version>
                    <inherited>true</inherited>
                    <executions>
                        <execution>
                            <id>enforce-java</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireMavenVersion>
                                        <message>Project must be built with Maven 3.0.3 or higher</message>
                                        <version>3.0.3</version>
                                    </requireMavenVersion>
                                    <requireJavaVersion>
                                        <message>Project must be compiled with Java 6 or higher</message>
                                        <version>1.6.0</version>
                                    </requireJavaVersion>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--This plugin's configuration is used to store Eclipse m2e settings
                only. It has no influence on the Maven build itself. This removes scr and
                the content-package plugin from the m2e build lifecycle -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.day.jcr.vault</groupId>
                                        <artifactId>content-package-maven-plugin</artifactId>
                                        <versionRange>[0.0.20,)</versionRange>
                                        <goals>
                                            <goal>check-signature</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.2.1</version>
                    <inherited>true</inherited>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.3</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.3.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.14.1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.9</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.6</version>
                </plugin>
                <plugin>
                    <groupId>org.jvnet.jaxb2.maven2</groupId>
                    <artifactId>maven-jaxb2-plugin</artifactId>
                    <version>0.8.3</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <!-- as long as profile activation does not work, we need some explicit
        plugins for all packagings -->
        <plugins>
            <!-- prevent creating war files during package lifecycle to improve speed, see http://stackoverflow.com/questions/352612/how-to-get-maven-to-run-warexploded-but-not-warwar
            also consider https://bugs.eclipse.org/bugs/show_bug.cgi?id=404175 as for m2e-wtp we need that being connected to the default phase-->
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-war</id>
                        <phase>${war.configuration.phase}</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <excludePackageNames>
                        *.impl
                    </excludePackageNames>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <configuration>
                    <reportPlugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-project-info-reports-plugin</artifactId>
                            <version>2.7</version>
                            <configuration>
                                <dependencyDetailsEnabled>true</dependencyDetailsEnabled>
                                <dependencyLocationsEnabled>true</dependencyLocationsEnabled>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-javadoc-plugin</artifactId>
                            <version>2.9.1</version>
                        </plugin>
                    </reportPlugins>
                </configuration>
                <dependencies>
                    <dependency><!-- add support for ssh/scp -->
                        <groupId>org.apache.maven.wagon</groupId>
                        <artifactId>wagon-ssh</artifactId>
                        <version>1.0</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>

        <!-- this resources section does only apply to content packages, since
        the given directory exists only in WAR packages -->
        <resources>
            <!-- copy everything what should be contained in the package to target/package -->
            <resource>
                <directory>${package.jcr.root}</directory>
                <targetPath>${project.build.directory}/package/jcr_root</targetPath>
                <excludes>
                    <!-- exclude everything what belongs to vlt and Mac as well as WEB-INF -->
                    <exclude>**/*.vlt</exclude>
                    <exclude>**/*.git</exclude>
                    <exclude>**/*.DS_Store</exclude>
                    <exclude>WEB-INF/**</exclude>
                    <!-- don't copy META-INF since it is set in the content-package-maven-plugin
                    configuration -->
                    <exclude>META-INF/**</exclude>
                    <!-- never copy any files which resulted from VLT conflicts -->
                    <exclude>**/*.base</exclude>
                    <exclude>**/*.mine</exclude>
                    <exclude>**/*.theirs</exclude>
                    <!-- TODO: we should exclude everything ending with a revision, for
                    example .r123, but there is no usefull pattern for that http://ant.apache.org/manual/dirtasks.html#patterns -->
                </excludes>
            </resource>
            <!-- maven default -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
    </build>
</project>